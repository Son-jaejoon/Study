장점 : 전역 접근 가능, 동시성 제어
단점 : 유닛 테스트(과도한 사용으로 인한 유닛 단위의 테스트가 어려워짐), 잘못된 습관(사용하기 쉬워 남용)

필수) 메모리 내에서 유일하지만 지속적인 인스턴스여야한다.

ex) 게임매니저

using UnityEngeine;

namespace Chapter.Singleton
{
	public class Singleton <T> : MonoBehaviour where T: Component
	{
		private static T _instance;
	
		public static T Instance
		{
			get
			{
				if(_instance == null)
					_instance = FindObjectOfType<T>();
				
					if(_instance == null)
					{
						GameObject obj = new GameObject();
						obj.name = typeof(T).Name;
						_instance = obj.AddComponent<T>();
					}
			}

			return _instance;
		}
	}

	public virtual void Awake()
	{
		if(_instance == null)
		{
			_instance = this as T;
			DontDestroyOnLoad(gameObject);
		}
		else
		{
			Destroy(gameObject);
		}
	}
}

public class GameManager : Singleton<GameManager>
으로 편하게 싱글톤으로 사용할 수 있다.

//위의 내용은 "유니티로 배우는 게임 디자인 패턴 제2판"을 공부한 후 정리한 내용입니다.