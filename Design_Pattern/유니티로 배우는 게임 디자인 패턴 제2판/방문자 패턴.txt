방문자 패턴의 주요 목적 : 객체에 방문한 방문자는 구조체의 특정 요소를 작업할 수 있다.

* 장점
- 개방/폐쇄 : 직접 수정하지 않고도 다른 클래스의 오브젝트와 함께 작동하는 새로운 동작을 추가할 수 있다.
	   이 방식은 객체 지향 프로그래밍의 원칙인 개방/폐쇄 원칙을 따른다.
- 단일 책임 : 방문자 패턴은 데이터를 보유하는 객체(방문 가능)를 가질 수 있고, 또 다른 객체(방문자)는
                      특정 행동을 도입하는 책임을 진다는 점에서 단일 책임 원칙을 준수할 수 있다.

* 단점
- 접근성 : 방문자는 방문하는 요소의 특정 개인 필드 및 메서드에 필요한 접근이 적을 수 있다.
                 클래스에서 패턴을 사용하지 않을 때보다 더 많은 공개 속성을 노출해야 할 수도 있다.
- 복잡성 : 방문자 패턴은 싱글턴, 상태, 오브젝트 풀 같은 간단한 패턴보다 구조적으로 훨씬 복잡하다.
                 이는 코드베이스가 복잡해질 수 있어 다른 프로그래머가 패턴 구조와 복잡성에 익숙하지 않다면
                 혼란을 겪을 수 있다.

* 방문자 패턴을 사용하는 경우
- 다양한 아이템의 경우, item이라는 추상 클래스를 상속시킨다면, 이후 유지보수이 높아짐.

//위의 내용은 "유니티로 배우는 게임 디자인 패턴 제2판"을 공부한 후 정리한 내용입니다.