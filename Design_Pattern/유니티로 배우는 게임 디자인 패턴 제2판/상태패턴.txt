상태 패턴의 세 가지 핵심 요소.

1 : Context 클래스는 클라이언트가 객체의 내부 상태를 변경할 수 있도록 요청하는 인터페이스를 정의한다.
      또한 현재 상태에 대한 포인터를 보유한다.

2 : IState 인터페이스는 구체적인 상태 클래스로 연결할 수 있도록 설정한다.

3 : ConcreteState 클래스는 IState 인터페이스를 구현하고 Context 오브젝트가 상태의 동작을 트리거하기 위해 
     호출하는 퍼블릭 메서드 handle()을 노출한다.

*장점
- 캡슐화 : 개체에 동적으로 할당할 수 있는 컴포넌트의 집합, 개체의 상태별 행동을 구현할 수 있다.
- 유지 및 관리 : 긴 조건문이나 방대해진 클래스의 수정 없이도 쉽게 새로운 상태를 추가할 수 있다.

*한계
- 블렌딩 : 기본 형태에서 상태패턴은 애니메이션 블렌드 방법을 제공하지 않는다.
                 캐릭터의 애니메이션 상태 간에 시각적 전환이 원할하지 않을 수 있다.
- 전환 : 패턴 구현에서 상태 간 관계를 정의하지 않는다. 대기 - 걷기 - 달리기 전환하는 경우 코드가 방대해지고 수행하는 데 시간이 많이 걸린다.

*대안 목록
- 블랙보드/행동트리 : NPC캐릭터의 복잡한 AI 동작의 경우, 동적으로 결정하는 동작을 하는 AI의 경우 BT가 적절하다.
- 유한 상태 기계 : 특정 입력 트리거를 기반으로 하는 유한 상태 간 전환에 더 깊이 관여한다. 자동 기계 같은 시스템을 구현하는 것에 더 적합. (상태 패턴은 종속적인 동작을 캡슐화 하는 것과 관련)
- 메멘토 : 상태 패턴과 비슷하지만 개체에 이전 상태로 돌아가는 기능을 지공한다. 세이브시스템 같은 경우.

//위의 내용은 "유니티로 배우는 게임 디자인 패턴 제2판"을 공부한 후 정리한 내용입니다.