옵저버 패턴의 핵심 목적 : 한 객체가 주제 역할을 하고 다른 객체가 관찰자 역할을 맡는 
                                           "객체 간의 일대다 관계"를 설정하는 것.

* 장점
- 역동성 : 주체에 필요한 만큼의 객체를 관찰자로 추가할 수 있으며 런타임에 동적으로 제거할 수 있다.
- 일대다 : 옵저버 패턴의 주요 이점은 일대다 관계가 있는 객체 간 이벤트 처리 시스템의 구현 문제를 해결할 수 있다.

* 단점
- 무질서 : 옵저버 패턴은 관찰자가 알림받는 순서를 보장하지 않는다. 
- 누수 : 주체는 관찰자에 대한 강한 참조를 가져 메모리 누수를 일으킬 수 있다. 

* 옵저버 패턴을 사용하는 경우
- 상태를 자주 변경하고 변경 사항에 대응해야 하는 종속성이 많은 핵심 컴포넌트의 경우.

* 대안
- 기본 C# 이벤트 시스템

//위의 내용은 "유니티로 배우는 게임 디자인 패턴 제2판"을 공부한 후 정리한 내용입니다.