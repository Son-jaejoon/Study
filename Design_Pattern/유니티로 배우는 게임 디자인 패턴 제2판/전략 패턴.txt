전략 패턴의 주요 목표 : 런아팀에 어떤 동작을 사용할 것인지의 결정을 연기하는 것.

* 전략 패턴의 주요 플레이어
- 콘텍스트 : 다양하고 구체적인 전략 클래스를 사용하며 전략 인터페이스로 상호작용하는 클래스
- 전략 인터페이스 : 모든 구체적인 전략 클래스에서 사용된다.
                                 콘텍스트 클래스가 전략을 실행하는 데 사용할 수 있는 메서드를 노출한다.
- 구체적인 전략 클래스 : 콘텍스트 객체에 저용할 수 있는 알고리즘 및 동작의 변형을 런타임에 구체적으로 구현한다.

▷ 전략 패턴은 행동 소프트웨어 디자인 패턴이다. 상태 패턴과 비슷하다.
     런타임에 동작을 선택하고 객체에 적용하길 원한다면 전략 패턴을 사용해야 한다.

* 장점
- 캡슐화 : 개별 클래스에 알고리즘의 변형을 캡슐화하도록 강제한다는 점이 가장 큰 장점이다.
                 코드를 구조화한 상태로 유지하면서 긴 조건문을 사용하는 것을 방지하는 데 도움이 된다.
- 런타임 : 전략 패턴의 주요 이점은 런타임에 객체가 사용하는 알고리즘을 교환할 수 있는 메커니즘을 구현한다는 점이다.
                  객체를 더욱 동적으로 만들고 확장할 수 있도록 한다.

* 단점
- 클라이언트 : 클라이언트 클래스는 선택해야 하는 전략을 알기 위해,
                         클라이언트가 구현한 알고리즘의 변형과 개별전략을 알고 있어야한다.
- 혼란 : 전략 패턴과 상태 패턴은 구조가 매우 유사하지만 의도가 달라 어떤 것을 어느 경우에 사용할지 선택하는 것이 어렵다.

* 전략 패턴을 사용하는 경우
- 동일한 동작이 다양하게 변형되는 엔티티가 있으며 개별 클래스에서 캡술화하고 싶다.(공격 - 총 무기류 같은 경우)
- 런타임에 현재 내부 상태를 고려할 필요 없이 특정 동작에 변형을 엔티티에 할당하고 싶다.


//위의 내용은 유니티로 배우는 게임 디자인 패턴 제2판을 공부한 후 정리한 내용입니다.