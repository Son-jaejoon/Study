유니티 버전 2021부터 오브젝트 풀링이 API에 통합됨.

오브젝트 풀이란?
- 컨테이너 형식의 풀은 초기화된 오브젝트 목록을 메모리에 남겨두고, 필요할 때 꺼내쓰고 반납하는 형식.

*장점
- 예측할 수 있는 메모리 사용 : 오브젝트 풀을 사용하여 특정한 종류의 객체 인스턴스를 특정한 양 만큼
		           유지하도록 예측 가능한 방식으로 메모리 일부를 할당 할 수 있다.
- 성능 향상 : 이미 메모리에서 객체를 초기화하여 새로운 객체의 초기화에 드는 로딩 비용이 필요 없다.

*단점
- 이미 관리되는 메모리에 대한 레이어링 : 최신 관리 프로그래밍 언어가 이미 메모리 할당을 최적으로 하여
			          오브젝트 풀 패턴이 불필요하다고 말하기도 한다.(경우에 따라 다르다.)
- 예측 불가능한 객체 상태 : 잘못 처리한 경우 객체가 초기 상태 대신 현재 상태로 풀에 되돌아온다.
		      객체가 손상되거나 파괴될 수 있는 경우 문제가 된다.

*오브젝트 풀 패턴을 사용하는 경우
- 최종 보스처럼 한번 스폰하는 경우는 메모리 낭비이다. 총알이나 파티클, 적 캐릭터 처럼 자주 생성되고 파괴되는
   엔티티의 경우 CPU에 부담을 완화할 수 있다.
=> 대규모의 엔티티 집합을 처리할 때 오브젝트 풀 패턴은 CPU spike와 렉을 피하는 데 도움이 된다.

▷ 인스턴스 와 객체의 차이
 - 객체 : 클래스가 가지고 있는 속성과 메서드를 포함한 일반적인 개념. 즉 객체를 생성하기 전까진 추상적인 개념
 - 인스턴스 : 객체를 실체화한 구체적인 개념

//위의 내용은 "유니티로 배우는 게임 디자인 패턴 제2판"을 공부한 후 정리한 내용입니다.