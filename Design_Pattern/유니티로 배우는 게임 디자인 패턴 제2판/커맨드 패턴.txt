커맨드 패턴에 사용하는 기본 클래스

*invoker(호출자) : 명령을 실행하는 방법을 알고 실행한 명령을 즐겨찾기할 수도 있는 객체
*receiver(수신자) : 명령을 받아서 수행할 수 있는 종류의 객체
*CommandBase : 개별 ConcreteCommand 클래스가 무조건 상속해야하는 추상 클래스.
	               호출자가 특정 명령을 실행하기 위해 호출할 수 있는 Execute() 메서드를 노출한다.

*장점
- 분리 : 커맨드 패턴은 실행 방법을 아는 객체에게서 작업을 호출하는 객체를 분리할 수 있다.
              분리 계층으로 즐겨찾기와 시퀀스 작업을 수행하는 중개자를 추가할 수 있다.
- 시퀀싱 : 커맨드 패턴은 되돌리기/다시하기 기능, 매크로, 명령 큐의 구현을 허용하고 사용자 입력을
                  큐에 넣는 작업을 용이하게 한다.

*단점
- 복잡성 : 각 명령이 그 자체로 클래스이다. 커맨드 패턴을 구현하려면 수 많은 클래스가 필요하며,
                 패턴으로 만들어진 코드의 유지 및 보수를 위해 패턴을 잘 이해해야 한다.

▷ 장점과 단점은 상황에 따라 다르다. 일반적인 경우를 기반으로 패턴을 사용할지 말지 결정하지 말고,
    프로젝트에서 패턴이 어떻게 작용할지 장단점을 분석해야 한다.

*커맨드 패턴을 사용하는 경우
- 실행 취소
- 매크로 : 공격 혹은 방어 콤보를 기록하고 자동으로 입력 키에 적용한다.
- 자동화 : 봇이 자동으로 그리고 순차적으로 실행할 명령 집합을 기록하는 자동화 과정 혹은 행동 구현
 
*대안
- 메멘토 : 객체를 이전 상태로 되돌리는 기능을 제공한다. 리플레이를 위해 커맨드 패턴을 사용한 것이지만
                 이전 상태로 되돌리는 기능을 가진 시스템을 구현한다면 메멘토 패턴을 선택하는 것이 좋다.
- 큐/스택 : 패턴이 아닌 데이터 구조체이다. InputHandler 클래스의 큐에 직접 모든 입력을 인코딩해 저장할 수 있다.

//위의 내용은 "유니티로 배우는 게임 디자인 패턴 제2판"을 공부한 후 정리한 내용입니다.