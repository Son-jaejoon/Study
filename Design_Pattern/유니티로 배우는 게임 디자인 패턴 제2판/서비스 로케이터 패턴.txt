서비스 로케이터 패턴은 초기화된 종속성의 중앙 레지스트리를 갖는 것이 핵심이다.

* 장점
- 런타임 최적화 : 런타임 콘텍스트에 따라 특정 서비스를 완료하고자 더 최적화된 라이브러리나 컴포넌트를
	          동적으로 감지하여 응용프로그램을 최적화할 수 있다.
- 단순성 : 구현하기 가장 간단한 종속성 관리 패턴 중 하나다.

* 단점
- 블랙박스화 : 서비스 로케이터 패턴의 레지스트리는 클래스 종속성을 읽기 어렵게 한다. 종속성을 잃거나 잘못 등록했다면
	     컴파일이 아닌 런타임에 이슈가 발생할 수 있다.
- 전역적 종속성 : 잘못된 목적으로 남용하면 서비스 로에키터 패턴 자체가 관리하기 힘든 전역 종속성이 될 수 있다.
	          코드는 과하게 의존하게 되고 나머지 핵심 구성 요소에서 쉽게 분리할 수 없게 된다.

* 서비스 로케이터 패턴을 사용하는 경우
- 동적으로 접근해야 하는 서비스 목록이 있지만 서비스를 얻는 것과 관련된 과정을 캡슐화하고 싶을 때 사용한다.


//위의 내용은 "유니티로 배우는 게임 디자인 패턴 제2판"을 공부한 후 정리한 내용입니다.