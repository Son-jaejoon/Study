1. 클래스 템플릿 : 클래스를 찍어내는 모양자. 함수 템플릿과 달리 인스턴스를 선언할 때 typename을 반드시 기술해야한다.
 
2. 템플릿 특수화 : 특별한 형식이 있을 경우에 나머지 다른 형식들과 전혀 다른 코드를 적용하는 방법론을 말합니다.

3. 스마트 포인터 : 동적으로 할당한 인스턴스를 '자동으로' 삭제해주는 편리한 포인터
                               단, 자동화라서 문제가 생기는 경우에는 주의해야 한다.

- auto_ptr : 동적 할당한 인스턴스를 자동으로 삭제한다. 가장 오래 존재했던 스마트 포인터 (사용하지 않는 걸 추천)
                      (배열 지원 x, 얕은 복사 문제 등이 해결되지 않는다.)
	
- shared_ptr  : 포인팅 횟수를 계산해서 0이 되면 대상을 삭제
- unique_ptr : shared_ptr과 달리 한 대상을 오로지 한 포인터로만 포인팅한다. (즉 하나의 소유자만 허용)
- weak_ptr : 하나 이상의 shared_ptr 인스턴스가 소유하는 개체에 접근할 수 있게 하지만 참조 수로 계산하지 않는다.
                       (사실 특수한 경우에만 사용하고 거의 사용하지 않는다.)

//위 내용은 '이것이 C++이다'를 공부한 후 작성한 내용입니다.
