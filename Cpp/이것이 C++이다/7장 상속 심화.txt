1. 가상 함수 : virtual 예악어를 앞에 붙여서 선언한 메서드. 
                       부모 형식과 관계 없이 파생(자식)형식에서 메서드를 다시 재정의할 수 있다.
- 일반 메서드 : 참조 형식을 따른다.
- 가상 함수 : 실 형식을 따른다. (파생 형식에서 PrintData() 가상 함수를 재정의한다면 미래의 함수를 호출)
- virtual void Func() final; : 파생 클래스에서 해당 함수 재정의를 막아둠 (재정의시 오류)
- 추상 자료형으로 (부모 클래스에서 자식 클래스로 생성했을 때) 선언 했을 때 소멸자를 가상화 해야한다.
   (virtual ~CMydata()) -> 자식 클래스의 소멸자까지 제대로 호출한다.

2. 가상 클래스 : 가상 함수를 가진 클래스. 가상 클래스의 소멸자는 virtual 예약어 선언이 없더라도 자동으로 가상화
- const_cast<> : 상수형 포인터에서 const를 제거
- static_cast<> : 컴파일 시 상향 혹은 하향 형변환
- dynamic_cast<> : 런타임(안정성 검사를 위해 컴파일러가 바이너리 코드 생성 느림) 시 상향 혹은 하향 형변환 
                                   (하향형변환을 하기 위해서는 부모 클래스에 가상함수가 있어야 함.)
- reinterpret_cast<> : C의 형변환 연산자와 흡사


3. 다중 상속 : 한 클래스가 두 개 이상의 클래스를 동시에 상속받는 경우
- 모호성이 다분할 수 있고, 코드가 쌓이면 오류가 발생할 확률이 높으므로 굳이 사용하진 않는다.
- 인터페이스 다중 상속일 경우 유일하게 좋은 상황