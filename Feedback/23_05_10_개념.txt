1. 제너릭이란
- 형식 매개변수이다.
- 클래스나 메서드를 호출하기 전까지 데이터 형식 지정을 연기 할 수 있다.
- 동일한 기능을 수행하지만, 입력하는 데이터 형식만 다른 경우
- 코드 재사용성이 높다.

2. 박싱 언박싱
- 박싱 : 값 -> 참조
- 언박싱 : 참조 -> 값
- 이를 남용하면 성능 저하(이를 해결하기 위한 것이 제너릭)

3. 레퍼런스와 포인터의 차이
- 포인터 : 메모리의 주소
- 레퍼런스 : 변수를 대신할 수 있는 또 하나의 이름(별명)
- 포인터는 NULL초기화 가능, 레퍼런스는 불가능
- 레퍼런스는 반드시 선언과 동시에 초기화
   (이러한 이유: 레퍼런스는 가리킬 대상을 못바꿈)
- 포인터는 별도의 메모리 공간 소모, 레퍼런스는 같은 메모리 참조(메모리 공간 소모 x)

4. 스레드와 프로세스의 차이
-  보조기억장치인 '프로그램'이 메모리 상으로 적재되어 실행되면 '프로세스'
- 같은 프로세스 내에서 실행되는 여러 작업(흐름)의 단위

5. 코루틴과 멀티스레드
- 코루틴 : 단일 쓰레드로만 돌아가는 유니티에서 고안한 방법
- 매 프레임마다 스케쥴링으로 관리가 됨.
-쓰레드 : 하나의 프로세스 단위를 의미 
- 멀티 스레드 구성 일 경우) 예외 상황(데드락), 순서 보장 x
- cf)데드락 : 프로세스가 자우너을 얻지 못해 다음 처리를 하지 못하는 상태(교착 상태)

6. dynamic cast, static cast란 
- dynamic cast : 하위 클래스의 포인터 및 참조형 데이터를 상위 클래스의 포인터 및 참조형 데이터로 변환 가능
- static cast : 위의 기능 포함 및 상위 클래스를 하위로도 변환 가능
- const_cast : const 성향을 제거하는 형 변환 연산자 (함수의 인자 전달 시)

7. 스마트 포인터의 종류
- Unique Pointer : 한 객체에 대해 오직 하나의 유니크 포인터만 가질 수 있는 포인터
- Shared Pointer : 여러 개의 포인터가 같은 객체를 가리킬 수 있는 포인터
   참조 횟수를 사용하여 객체 소유권을 추적하며, 참조 횟수가 0이 되면 객체 삭제
- Weaked Pointer : 공유 포인터와 비슷하지만, 참조 횟수를 증가시키지 않고 
   객체참조, 주로 공유 포인터가 가리키는 객체의 유효성 검증하기 위해 사용된다.

8. Dangling pointer 란
- 더 이상 유효하지 않은 메모리를 가리키는 포인터를 의미한다.
   이러한 포인터는 예기치 않은 결과를 초래할 수 있다.
- 프로그램의 안전성과 보안에 영향을 미칠 수 있는 위험한 요소 중 하나.
