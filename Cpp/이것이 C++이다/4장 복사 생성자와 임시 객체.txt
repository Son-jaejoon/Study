1. 복사 생성자 : 객체의 복사본을 생성할 때 호출되는 생성자

2. 깊은 복사와 얕은 복사 : 실제 값을 두 개로 만드는 깊은 복사와, 값은 하나이나 포인터만 두 개인 얕은 복사
- 얕은 복사로 인한 존재하지 않는 메모리를 해제하려는 경우 깊은 복사로 설정해야한다.(주소값을 가리키게)
- a = b 처럼 클래스를 복사한다면 얕은 복사가 이러나 오류가 발생할 수 있다.

3. 임시 객체 : 컴파일러가 임의로 생성했다가 바로 소멸시키는 객체.
                       성능향상을 위해 이를 다루려면 '식별자'를 부여해야 한다.
- explicit : 생성자 앞에 선언해두면 묵시적 변환을 막아준다.(직접 바꾸는건 상관 없음)
- (int)와 같이 c 스타일 변환은 강제 형변환을 시키기 때문에 static_cast<자료형>() 형변환을 사용하자.
- const operator int(void) { return param } : 사용자 코드에서 보이지 않는 객체가 생성 소멸을 방지.
- int : 상수
- int & : 변수 참조
- int && : r-value 참조
- int, int && 의 다중 정의(오버로딩)의 경우 모호성을 띌 수 있다.

4. 이동 시맨틱 : 복사 생성자와 대입 연산자에 r-value 참조를 조합해서 새로운 생성 및 대입의 경우를 만드는 것
- 생성자에 int &&로 선언해두고, 함수를 호출할 때 임시객체를 깊은 복사로 하는 것이 아닌
   얕은 복사로 사본을 만들어 성능을 높일 수 있다.

// 위 내용은 '이것이 C++이다'를 공부한 후 작성한 내용입니다.