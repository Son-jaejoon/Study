- 디폴트 매개변수 : 기본값을 정해서 함수 이름만 쓰면 함수를 실행
1. 피호출자 함수 매개변수의 디폴트 값은 반드시 오른쪽 매개변수부터 기술
2. 매개변수가 여러 개일 시, 디폴트 하고 싶은 변수의 오른쪽 '모든' 매개변수에 대한
     디폴트 값을 기술해야 한다.
3. 호출자 함수가 피호출자 함수 매개변수의 실인수를 기술하려면 왼쪽부터 짝을 맞추어 적용
기존에 작성한 코드의 설계를 바꿀 때, 유용하다(오류 발생을 막기 위해 디폴트 값 사용)

- 다중 정의(오버로딩) : 이름은 같은데 내 맘대로 자료형을 바꿔도 된다.
1. '다형성'을 지원하기 때문.
2. 디폴트 매개변수와 오버로딩으로 인한 '모호성'을 조심해야한다.
(제작자와 사용자가 다른 경우, 오류를 경험할 수 있는 것)
3. 오버로딩은 유지보수가 어렵다. 그러므로 함수 템플릿을 사용하자.
3-1. template <typename T>

- 인라인 함수 : 함수와 매크로의 장점을 모은것
1. inline을 통해 컴파일러가 함수를 판단하게 된다.
2. 실행 속도가 빨라진다(최적화)
3. 불필요하게 사용하면 컴파일 속도가 느려진다.
4. 실행파일의 크기가 커진다.

- 네임스페이스 : 내가 원하는 함수, 변수 등에 소속감을 심어준다(폴더?)
1. 각종 요소들(변수, 함수, 클래스 등)을 한 범주로 묶어주기 위한 문법
2. 네임스페이스 안에 네임스페이스가 중첩으로 있을 수 있다.

// 위 내용은 '이것이 C++이다'를 공부한 후 작성한 내용입니다.