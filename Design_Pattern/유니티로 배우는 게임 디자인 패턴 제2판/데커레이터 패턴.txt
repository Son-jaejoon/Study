데커레이터란 ? 기존 객체를 변경하지 않고 새로운 기능을 추가할 수 있는 패턴이다.

* 장점
- 서브클래싱의 대안 : 서브클래싱의 동적인 대안이며 상속의 한계 또한 극복한다.
	                 상속은 정적인 프로세스다. 데커레이터 패턴과 달리 런타임에 존재하는 객체의 행동이
	                 확장되는 것을 허용하지 않는다. 원하는 동작이 있는 같은 부모 클래스의 인스턴스만
	                 다른 인스턴스로 교체할 수 있다.
- 런타임 다이내믹 : 객체에 데커레이터를 추가하여 런타임에 기능을 추가할 수 있다.

* 단점
- 복잡한 관계 : 객체 주변에 다양한 계층의 데커레이터가 있다면 초기화 체인과 데커레이터 간의 관계를 추적하는 것이
	      매우 복잡해질 수 있다.
- 복잡해지는 코드 : 구현하는 방법에 따라 몇 개의 작은 데커레이터 클래스를 유지 및 관리해야 할 수도 있어 코드가 복잡해질 수 있다.

* 데커레이터 패턴을 사용하는 경우
- 개별 객체에 행동을 추가 및 삭제하는 기능의 시스템을 구현할 때 고려해야 하는 패턴이다.
- 예) 아티팩트 카드로 기본 카드의 능력을 올려줄 때, 액세서리로 특정 능력치를 증가시킬 때.

//위의 내용은 "유니티로 배우는 게임 디자인 패턴 제2판"을 공부한 후 정리한 내용입니다.