1. 배열
- 선언 : 데이터_형식[ ] 배열_이름 = new 데이터_형식[용량];
- arr.Length : 배열의 길이
- ^  == arr.Length, ^1은 Length - 1을 의미한다.

- 관련 메소드
 * Sort() : 정렬
 * BinarySearch<T>() : 이진탐색
 * IndexOf() : 특정 데이터의 인덱스 반환
 * TrueForAll<T>() : 모든 요소 조건 탐색
 * FindIndex<T>() : 조건에 부합하는 첫번째 인덱스 반환

- Range : 배열 분할, .. 연산자 활용
 * 0(시작하는 인덱스 포함)..3(마지막 인덱스 제외) -> 0, 1, 2 가 분할되서 저장됨 -> [ )
 * int[] sliced_arr = arr[0..3];
 * 범위 생략 시 시작 인덱스는 0으로 고정되며, 마지막은 마지막 요소의 위치 반환(length)

- 2차원 배열 선언
 * 데이터_형식[, ] 배열_이름 = new 데이터_형식[2차원_길이 row, 1차원_길이 col];
 * int[, ] arr = new int[2, 3]; / int score = arr[1,2];

- 가변 배열
 * 데이터_형식[ ][ ] 배열_이름 = new 데이터_형식[가변_배열의_용량][ ];
 * 행의 길이만 정하고 열의 길이는 이후 초기화 과정에서 행마다 달라짐

2. 컬렉션
- using System.Collections;

- ArrayList : 배열과 가장 닮은 컬렉션
 * ArrayList list = new ArrayList();
 * list.Add(10);, list.RemoveAt(1), list.Insert(1, 25);
 * ArrayList list = new ArrayList() {11, 22, 33};

- Queue : FIFO(first in first out)
 * Queue que = new Queue();
 * que.Enqueue(1);, que.Dequeue(); - Dequeue() : 맨 앞의 값을 꺼낸다.(front() + pop())
 * Queue que = new Queue(arr);
 
- Stack : LIFO(last in first out)
 * Stack stk = new Stack();
 * stk.Push(1);, stk.Pop(); - 큐와 동일하게 꺼낸 후 제거한다.(front() + pop())

- Hashtable : Key + Value
 * Hashtable ht = new Hashtable();
 * ht["Study"] = "공부";, Console.WriteLine(ht["Study"]);
 * Hashtable ht = new Hashtable(){ ["하나"] = 1, ["둘"] = 2 };

3. 인덱서 : 객체를 마치 배열처럼 사용할 수 있게 해주는 프로퍼티
- 한정자 인덱서_형식 this[형식 index]
   {
	get{ // index를 이용하여 내부 데이터 반환 }
	set{ // index를 에용하여 내부 데이터 저장 }
   }
- public int this[int index]
   {
	get { return arr[index];
	set 
	{
		if(index >= arr.Length)
			arr.resize<int>(ref arr, index + 1);
		arr[index] = value;
	}
   }

// 위 내용은 '이것이 C#이다'를 공부한 후 작성한 내용입니다.