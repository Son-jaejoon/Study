이벤트 버스 패턴은 쉽게 예를 들어, 메시징 시스템 혹은 발행/구독 패턴과 비슷하다.
보다 강력한 결합이 필요할 때는 옵저버 패턴을 사용한다.

게시자(발행자) - 이벤트 버스 - 구독자

*게시자 : 이벤트 버스에서 선언한 특정 종류의 이벤트를 구독자에게 게시할 수 있다.
*이벤트 버스 : 구독자와 게시자 사이의 이벤트 전송을 조정하는 역할을 한다.
*구독자 : 이벤트 버스를 통해 특정 이벤트의 구독자로 자신을 등록한다.

*장점
- 분리 : 오브젝트는 직접 서롤르 참조하는 대신 이벤트로 통신할 수 있다.
- 단순성 : 이벤트의 구독 혹은 게시 메커니즘을 추상화하여 단순성을 제공한다.

*단점
- 성능 : 모든 이벤트 시스템의 내부에는 오브젝트 간 메시지를 관리하는 저수준 메커니즘이 있다.
 
*이벤트 버스를 언제 사용할까?
- 빠른 프로토 타이핑 : 새로운 게임 메커니즘이나 기능을 빠르게 프로토 타이핑 할 때
- 프로덕션 코드 : 게임 이벤트를 더 정교하게 관리해야 하는 이유를 찾지 못하면
	         프로덕션 코드에서 이벤트 버스를 사용한다.

*대안
- 옵저버 : 엔티티 그룹 간의 일대다 관계를 설정할 때 고려해야할 패턴
- 이벤트 큐 : 게시자와 구독자 간 시각적 관계를 분리한다.
- ScriptableObject : 유니티에서는 ScriptableObjects로 이벤트 시스템을 만들 수 있다.
	                  새로운 커스텀 게임 이벤트를 더욱 쉽게 만들 수 있는 장점이 있다.
	                  확장 및 조정할 수 있는 이벤트 시스템을 만들 떄 괜찮은 패턴이다.

//위의 내용은 "유니티로 배우는 게임 디자인 패턴 제2판"을 공부한 후 정리한 내용입니다.