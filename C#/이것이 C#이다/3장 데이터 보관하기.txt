1. 값 형식과 참조 형식
- 값 형식 : 스택에 저장 된다. 코드블럭이 끝나면서 스택에 저장된 값 변수들은 사라진다.
- 참조 형식 : 스택에 주소 저장, 힙에 실제 값 저장.
                      코드블럭이 끝나면 스택에 주소가 사라지고, 이후 안쓰는 실제 값은 GC가 처리.

2. 데이터 형식
- byte(부호 없는 정수) : 양수, sbyte (signed byte 정수) : 음수와 양수 모두
- uint(부호 없는 정수), int : 음수 양수 모두
- 2진수 표현 접두사 0b, 10진수 표현 접두사 안쓰기, 16진수 표현 접두사 0X(또는 0x)
- 데이터 형식의 최대값을 넘어가는 데이터를 저장하면 overflow
- 데이터 형식의 최저값보다 작은 데이터를 저장하면 underflow
- decimal 형식 (실수) 정밀도가 훨씬 높다, 계산기 프로그램 적절, 
   decimal a = 3.1415_123123m(f 붙히면 float, m 붙히면 decimal);

3. 문자열
- string 줄바꿈 \n 이지만 """내용""" 이면 이스케이프 문자없이 줄바꿈 가능.

4. 오브젝트
- object는 모든 형식의 데이터를 담을 수 있다. 참조형식

5. 박싱과 언박싱
- object a = 20; // 20을 박스에 담아 힙에 저장시키고, 스택에 a(20을 가르키는)를 저장한다.

6. 데이터 형식 바꾸기
- int a = int.Parse("12345") / float a = float.Parse("123.45");
- string c = a.ToString();

7. Nullable
- 비어있는 상태가 될 수 있는 변수. / 참조 형식은 사용 불가.
- 데이터 형식 뒤에 ? / int? a = null;
- a.HasValue : a에 값이 있는 지 확인하는 것.

8. var
- 컴파일러가 변수 형식을 지정. / 반드시 변수를 선언하며 초기화해야한다. / 지역변수로만

// 위 내용은 '이것이 C#이다'를 공부한 후 작성한 내용입니다.