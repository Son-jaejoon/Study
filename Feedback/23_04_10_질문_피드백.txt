◎ 디자인 패턴에 대한 종류 및 사용해본 것은 ?
- 싱글톤, FSM, 옵저버, 전략

◎ 동기, 비동기 프로그래밍 사용해본 경험 ?
- 비동기 프로그래밍 사용경험 x (자원을 효율적으로 사용할 수 있음 - 기다리지 않고 다른 작업을 계속할 수 있기 때문에)
#참고 : https://bre.is/SWqJDvvs

◎ 박싱, 언박싱에 대한 설명
- 박싱 : 값 형식을 참조 형식으로 / ex) int -> object  / 해당 과정에서 메모리 추가사용
- 언박싱 : 참조 형식을 값 형식으로 / ex) object -> int / 해당 과정에서 할당의 4배에 달하는 시간 소요 

-> 박싱의 경우 암시적으로 사용되는 경우가 있어, 꼭 필요한 곳에만 사용해야한다.
(성능 저하를 발생 시킬 수 있음) 

◎ Struct와 Class의 차이는?
- Struct : 값 형식(스택), 값이기 때문에 원본에 영향 x
- Class : 참조 형식(힙), 참조이기 때문에 원본에 영향 o

-> GC(가비지 컬렉터)는 힙에 할당된 메모리를 정리함. 이때 처리해야하는 양이 많아지면 성능저하를 잃으키므로 무분별한 힙 사용은 좋지 않음.
그렇다고 스택 메모리만 사용하면, 메모리 제한에 걸려 오버플로우 발생할 수 있음.


◎ 싱글톤에 대한 개념
- 오직 한 개의 클래스 인스턴스만을 갖도록 보장하며, 이에 대한 전역적인 접근점을 제공한다. / ex) 매니저 같은 경우
- 유니티의 경우 Awake는 생성 시 단 한번만 작동시켜서 해당 부분에 선언
- 쉽게 접근할 수 있다보니 남용하면 꼬이는 경우가 발생한다 주의!

◎ 오브젝트 풀에 대한 개념
- 오브젝트를 생성하거나 파괴할때 메모리에 부담을 주고, 오브젝트 파괴 이후 발생하는
가비지 컬렉팅으로 인한 프레임 드랍이 발생할 수 있음. -> 이를 막아주는 것이 오브젝트 풀
- 필요한 오브젝트를 미리 선언해두고, 필요할 때 꺼내쓰고 반납하는 방식
- 주로 총알, 이펙트 같은 생성 후 파괴되는 오브젝트들에 이용함.
#참고 : https://wergia.tistory.com/203

// 알고있던 개념들도 당황해서 제대로 말하지 못한 것에 대한 아쉬움. 
하지만 좀 더 명확하게 알고 정확하다는 생각이 있었다면 자신있게 대답했을 거라 생각.
현재 나의 상황을 알 수 있었던 면접이었기에, 더욱 성장할 수 있는 경험이었다. 