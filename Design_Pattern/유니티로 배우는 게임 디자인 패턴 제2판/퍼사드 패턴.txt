퍼사드 패턴은 건물의 퍼사드와 유사하다(복잡한 내부 구조를 숨기는 외부 면).
퍼사드 패턴의 구현은 보통 상호작용하는 서브시스템 모음에 단순 인터페이스로 작용하는 단일 클래스로 제한된다.

* 장점
- 복잡한 코드 본문에 단순화된 인터페이스 제공 : 견고한 퍼사드 클래스는 복잡한 시스템과 상호작용할 수 있는
				  단순화된 인터페이스를 제공하면서 클라이언트에게 복잡성을 숨긴다.
- 쉬운 리팩터링 : 퍼사드 패턴 뒤에 고립된 코드를 리팩터링하는 것은 훨씬 쉽다. 시스템 뒤에서 구성 요소가 수정되는 동안
	          시스템의 인터페이스는 클라이언트와의 일관성을 유지하기 때문이다.

* 단점
- 지저분한 코드를 쉽게 숨길 수 있다 : 퍼사드 패턴을 사용하면 장기적으로 봤을 때 패턴의 핵심 이점을 없다.
- 너무 많은 퍼사드 : 남용하게 되면 너무 많은 클래스가 각 함수에 의존하는 코드베이스로 끝나고 만다.
	              결과적으로 디버깅, 리팩터링, 단위 테스트 구성 요소는 매우 어려워 진다.

* 대안 살펴보기
- 추상 팩토리 패턴 : 클라이언트 코드에서 서브시스템 객체가 초기화되는 방식만을 숨기려면
	              퍼사드 패턴 대신 추상 팩토리 패턴을 고려한다.
- 어댑터 패턴 : 호환되지 않는 두 인터페이스를 연결하고자 기존 클래스에 래퍼를 작성하려는 경우 어댑터 패턴을 고려한다.

//위의 내용은 "유니티로 배우는 게임 디자인 패턴 제2판"을 공부한 후 정리한 내용입니다.