1. 프로세스와 스레드
 - 프로세스 : 실행파일이 실행되어 메모리에 적재된 인스턴스, 하나 이상의 스레드로 구성된다.
 - 스레드 : 운영체제가 CPU 시간을 할당하는 기본 단위

 - 멀티 스레드를 했을 때 얻을 수 있는 장단점
 ● 장점
   1. 응답성을 높일 수 있다.
   2. 자원 공유가 쉽다.
   3. 경제적이다.
 ● 단점
   1. 구현이 복잡하다.
   2. 소프트웨어 안정성을 악화시킬 수 있다. (멀티 프로세스는 자식 프로세스만 죽지만, 멀티 스레드는 전체 프로세스에 영향을 준다.)
   3. 과용하면 성능이 저하될 수 있다. 

2. 스레드 다루는 법
 - 1. Thread의 인스턴스를 생성한다. 이때 생성자의 인수로 스레드가 실행할 메소드를 넘긴다.
    2. Thread.Start() 메소드를 호출하여 스레드를 시작한다.
    3. Thread.Join() 메소드를 호출하여 스레드가 끝날 때까지 기다린다.
 * static void DoSomething()
   {
	for(int i = 0 ; i < 5 ; i++)
		Console.WriteLine("DoSomething : {0}", i);
	Thread.Sleep(10); // 인수만큼 CPU사용을 멈춘다. 이때 인수 단위는 밀리초.	
   }

   static void Main(string[] args)
   {
	Thread t1 = new Thread(new ThreadStart(DoSomething)); // Thread의 인스턴스 생성
	t1.Start(); // 스레드 시작, 메모리 적재
	t1.Join(); // 스레드의 종료대기
   }

 - 스레드 상태
 1. Unstarted : 스레드 객체를 생성한 후 Thread.Start() 메소드가 호출되기 전 상태
 2. Running : 스레드가 시작하여 동작 중인 상태
 3. Suspended : 스레드의 일시 중단 상태
 4. WaitSleepJoin : 스레드가 블록된 상태, Monitor.Enter(), Thread.Sleep(), Thread.Join() 메소드를 호출하면 이 상태가 됨.
 5. Aborted : 스레드가 취소된 상태
 6. Stopped : 중지된 스레드의 상태
 7. Background : 스레드가 백그라운드로 동작하고 있음을 나타냄

- 스레드 임의로 종료하는 법
 1. Thread.Abort() : 메소드를 사용할 때도 도중에 강제로 중단된다.
 2. Thread.Interrupt() : WaitSleepJoin 상태에 있을 때는 즉시 중단시킨다.
                                          다른 상태일 때는 스레드를 지켜보다가 WaitSleepJoin 상태가 되면 중단된다.

 - 스레드 간 동기화
 * 동기화 : 스레드들이 순서를 갖춰 자원을 사용하게 하는 것

  1. lock 키워드
   - 크리티컬 섹션(스레드가 실행하고 있을 때 다른 스레드는 실행하지 못하게 하는 것)을 만드는 것
   * lock (thisLock)
     {
	// 가두기
     }
   - 모든 스레드들이 크리티컬 섹션을 생성하려고 할때 소프트웨어 성능이 크게 작아진다.
   - 절대 사용하지 않기를 권장하는 것
    * this : 클래스의 인스턴스는 외부에서도 자주 사용되기에 나쁜 버릇이다. lock(this)
    * Type 형식 : 코드 어느곳에서나 특정 형식에 대한 type객체를 얻을 수 있다. lock(typeof(SomeClass)) 나 lock(obj.GetType()) 
    * string 형식 : 어떤 코드에서든 얻어낼 수 있는 string 객체이다. lock("abc")

3. Monitor 클래스로 동기화하기
   - Monitor.Enter() : 크리티컬 섹션을 열고, Monitor.Exit() : 크리티컬 섹션을 닫는다.   
   * Monitor.Enter(thisLock);
      try{
      }
      finally{
	Monitor.Exit(thisLock);	      
      }
   - lock 키워드는 Monitor.Enter(), Monitor.Exit() 메소드를 바탕으로 구현되어있다.
   - Monitor.Wait(), Monitor.Pulse()로 하는 저수준 동기화
    * Monitor.Wait() : WaitSleepJoin상태로 만들어 대기시킨다. Waiting Queue에 입력대고 다른 스레드가 락을 얻어 작업 수행
    * Monitor.Pulse() : Waiting Queue에 입력되어있는 스레드를 꺼내 Ready Queue에 입력
    * 사용법 :
      1. 클래스안에 동기화 객체 필드를 선언
      2. WaitSleepJoing 상태로 바꿔 블록할 조건을 결정할 필드 선언. 
      3. 해당 조건안에서 Monitor.Wait() 호출
      4. 필드 true 이후 다시 false로 만든 후 Monitor.Pulse() 호출 (조건에 따라 3번과 4번이 실행됨)
  - 동기 : 검투사가 검을 쓰는 방식, 찌르고 빼고 다음 동작(코드가 다 끝나고 다음 코드)
  - 비동기 : 궁수가 활을 쏘는 방식, 활을 쏜 다음 바로 다음 동작(코드가 끝날때까지 기다리지 않음)


// 위 내용은 '이것이 C#이다'를 공부한 후 작성한 내용입니다.